//---------------------------------------------------------------------------------------------------------------------------
// Kayit edilen tüm derslerin listesini ekrana yazdiran method
// Method - 7
public static void listeDersler(TreeSet<String> dersler) {


//---------------------------------------------------------------------------------------------------------------------------
// EvenOddNums isminde bir method oluşturun.
// Bu yöntem String olan bir parametreyi kabul etsin.
// Bu String'de 1234567890 gibi 10 haneli sayılar olacak.
// Sayıların her basamağını alın ve basamak çiftse toplayın, tekse çıkartın.
// toplam sonucu yazdırın.
// İpucu:Sayılar işlemleri yapabilmeniz için, basamakları tam sayıya dönüştürmeniz gerekiyor.
// For TECHNOSTUDY_USA.example Örnek:
// String =  "6678421312"		6+6-7+8+4+2-1-3-1+2		sonuç 16 olmalı

public static int EvenOddNums(String str){




//---------------------------------------------------------------------------------------------------------------------------
// ismi fib olan bir method oluşturun. Bu methos bir int değer kabul etsin. Return int olmalı.
// Örnek 1:	Yaygın olarak F (n) olarak gösterilen Fibonacci sayıları, Fibonacci sekansı adı verilen 
// bir sekans oluşturur, böylece her sayı, 0 ve 1'den başlayarak önceki iki numaranın toplamıdır.
// F(0) = 0,   F(1) = 1	F(N) = F(N - 1) + F(N - 2), for N > 1.
// Verilen N, değerleri hesaplayın,F(N).e1:
// Örnek 1:	Girdi: 2	Çıktı: 1	Açıklama: F(2) = F(1) + F(0) = 1 + 0 = 1.
// Örnek2:		Girdi: 3	Çıktı: 2	Açıklama: F(3) = F(2) + F(1) = 1 + 1 = 2.
// Örnek 3:	Girdi: 4	Çıktı: 3	Açıklama:F(4) = F(3) + F(2) = 2 + 1 = 3.

public static int fib(int n){


//---------------------------------------------------------------------------------------------------------------------------
// duplicate() isminde bir method oluşturun.
// Parametresi int Array olmalı
// Return tipi boolean
// Eğer Array içinde çiftleme(yineleme) var ise true dönmeli.
// Eğer Array içinde çiftleme(yineleme) yok ise false dönmeli.
// Örnek1:
// Input: [1,2,3,1]
// Output: true
// Örnek 2:
// Input: [1,2,3,4]
// Output: false

public static boolean duplicate(int[] arr){



//---------------------------------------------------------------------------------------------------------------------------
public int[] zeroMax(int[] nums) {

	return null;
}

Return a version of the given array where each zero value in the array is replaced by
the largest odd value to the right of the zero in the array.
If there is no odd value to the right of the zero, leave the zero as a zero.


zeroMax([0, 5, 0, 3]) → [5, 5, 3, 3]
zeroMax([0, 4, 0, 3]) → [3, 4, 3, 3]
zeroMax([0, 1, 0]) → [1, 1, 0]
